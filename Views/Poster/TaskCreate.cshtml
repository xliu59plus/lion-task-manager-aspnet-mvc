@model LionTaskManagementApp.Models.TaskModel

@{
    ViewData["Title"] = "Create";
}

<h1>Task Creation</h1>

<h4>Create New Task!</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="TaskCreate">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <input type="hidden" asp-for="OwnerId" value="@User.Identity?.Name" />
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Budget" class="control-label"></label>
                <input asp-for="Budget" class="form-control" />
                <span asp-validation-for="Budget" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Length" class="control-label"></label>
                <input asp-for="Length" class="form-control" />
                <span asp-validation-for="Length" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Height" class="control-label"></label>
                <input asp-for="Height" class="form-control" />
                <span asp-validation-for="Height" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FullAddress">Address:</label>
                <input asp-for="FullAddress" class="form-control" id="addressInput" placeholder="Enter an address" />
            </div>

            <div class="form-group">
                <label asp-for="FirstLine">Address Line 1:</label>
                <input asp-for="FirstLine" class="form-control" id="firstLine" readonly />
            </div>

            <div class="form-group">
                <label asp-for="SecondLine">Address Line 2:</label>
                <input asp-for="SecondLine" class="form-control" id="secondLine" />
            </div>
            <div class="form-group">
                <label asp-for="StateProvince">State/Province:</label>
                <input asp-for="StateProvince" class="form-control" id="stateProvince" readonly />
            </div>
            <div class="form-group">
                <label asp-for="City">City:</label>
                <input asp-for="City" class="form-control" id="city" readonly />
            </div>
            <div class="form-group">
                <label asp-for="ZipCode">Zip Code:</label>
                <input asp-for="ZipCode" class="form-control" id="zipCode" readonly />
            </div>

            <input type="hidden" asp-for="LatAndLongitude" id="LatAndLongitude" readonly />

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBdkv4tRPCXtSDaqbRpQLQ6QjER5zIAagg&libraries=places"></script>

<script>
    function initAutoCompete() {

        // Autocomplete for the address input
        var input = document.getElementById('addressInput');
        var autocomplete = new google.maps.places.Autocomplete(input);

        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                console.log("Autocomplete's returned place contains no geometry");
                return;
            }

            // Get latitude and longitude
            var lat = place.geometry.location.lat();
            var lng = place.geometry.location.lng();
            document.getElementById('LatAndLongitude').value = lat.toString() + " " + lng.toString();

            // Populate address components
            var addressComponents = place.address_components;
            for (var i = 0; i < addressComponents.length; i++) {
                var component = addressComponents[i];
                var componentType = component.types[0];
                switch (componentType) {
                    case 'street_number':
                        document.getElementById('firstLine').value = component.long_name;
                        break;
                    case 'route':
                        document.getElementById('firstLine').value += ' ' + component.short_name;
                        break;
                    case 'locality':
                        document.getElementById('city').value = component.long_name;
                        break;
                    case 'administrative_area_level_1':
                        document.getElementById('stateProvince').value = component.short_name;
                        break;
                    case 'postal_code':
                        document.getElementById('zipCode').value = component.long_name;
                        break;
                }
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelector('form').addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        });
    });

    window.onload = initMap;
</script>