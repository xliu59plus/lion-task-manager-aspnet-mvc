@using Microsoft.AspNetCore.SignalR
@model IEnumerable<LionTaskManagementApp.Models.ContractorNotificationModel>


@{
    ViewData["Title"] = "Notification Center";
}

<h1>Notification Center</h1>

@if (TempData["NotificationMessage"] != null)
{
    <div class="alert alert-info">
        @TempData["NotificationMessage"]
    </div>
    TempData.Remove("NotificationMessage");
}

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Title)</th>
            <th>@Html.DisplayNameFor(model => model.IsNotified)</th>
            <th>@Html.DisplayNameFor(model => model.IsRead)</th>
            <th>Distance (miles)</th>
            <th>Budget (USD)</th>
            <th>@Html.DisplayNameFor(model => model.CreatedDatetime)</th>
            <th>@Html.DisplayNameFor(model => model.ExpirationDatetime)</th>
            <th>View Detail</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.IsNotified)</td>
                <td>@Html.DisplayFor(modelItem => item.IsRead)</td>
                <td>@Html.DisplayFor(modelItem => item.DistanceInMiles)</td>
                <td>@Html.DisplayFor(modelItem => item.Budget)</td>
                <td class="relative-time" data-datetime="@item.CreatedDatetime">@item.CreatedDatetime</td>
                <td class="relative-time" data-datetime="@item.ExpirationDatetime">@item.ExpirationDatetime</td>
                <td><a href="@Url.Action("TakerDetails", "Taker", new { id = item.TaskId })">View Detail</a></td>
            </tr>
        }
    </tbody>
</table>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script>
    $(function () {
        function updateRelativeTime() {
            $('.relative-time').each(function () {
                var datetime = $(this).data('datetime');
                var timeAgo = moment.utc(datetime).fromNow();
                $(this).text(timeAgo);
            });
        }

        updateRelativeTime();
        setInterval(updateRelativeTime, 60000); // Update every minute

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/NotificationHubService") // Replace with your hub URL
            .build();

        connection.on("NotificationMessage", function (message) {
            console.log("receiving message:" + message);
            location.reload();
        });

        connection.start().then(function () {
            console.log("SignalR started");
        }).catch(function (err) {
            return console.error(err.toString());
        });
    });
</script>
@* <script> *@
@*     $(function () { *@
@*         var connection = new signalR.HubConnectionBuilder() *@
@*             .withUrl("/NotificationHubService") // Replace with your hub URL *@
@*             .build(); *@

@*         console.log(connection); *@

@*         connection.on("NotificationMessage", function (message) { *@
@*             console.log("receiving message:" + message); *@
@*             location.reload(); *@
@*         }); *@

@*         connection.start().then(function () { *@
@*             // document.getElementById("sendButton").disabled = false; *@
@*             console.log("singalr started"); *@
@*             console.log("connection", connection); *@
@*         }).catch(function (err) { *@
@*             return console.error(err.toString()); *@
@*         }); *@
@*     }); *@
@* </script> *@